"""
Django settings for users_service project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path

# import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "m!j+%k)bm-(5gzc3jm50nz4^oo98bv7()sfzy!#fq#u0h!47t$")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG", default=0))

# ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS","127.0.0.1").split(",")

ALLOWED_HOSTS = ['*'] 


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'users',

    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
]



# REST_FRAMEWORK = {
#     "DEFAULT_AUTHENTICATION_CLASSES":(
#         "rest_framework_simplejwt.authentication.JWTAuthentication",
#     ),
#     "DEFAULT_PERMISSION_CLASSES":(
#         "rest_framework.permissions.IsAuthenticated",
#     ),
# }


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'SIGNING_KEY': SECRET_KEY,  # Utilisez une clé différente en production
}

MIDDLEWARE = [

    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    
    'django.middleware.security.SecurityMiddleware',

    # 'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'users_service.urls'


# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'users_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Autorisez les requêtes depuis votre frontend React
CORS_ALLOWED_ORIGINS = [
    "http://client:5173",  # Frontend
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "http://localhost",
    "http://localhost:8001",  # Service de tâches
    "http://127.0.0.1:8001",
    "http://tache:8001",
    "http://192.168.10.10:5173",
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost",
    "http://localhost:5173",
    "http://client:5173",
    "http://127.0.0.1:5173",
    "http://localhost:8001",
    "http://tache:8001",
    "http://192.168.10.10:5173",
]

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '0.0.0.0',
    'utilisateur'
]

# Configuration pour les cookies de session
SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SECURE = True

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True

# CSRF Configuration
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS.copy()

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend' 
]


AUTH_USER_MODEL = 'users.CustomUser' 


CORS_EXPOSE_HEADERS = ['Content-Disposition']

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'content-disposition'
]


NOTIFICATION_SERVICE_URL='http://localhost:8002'

# Configuration RabbitMQ
RABBITMQ = {
    'HOST': 'rabbitmq',
    'PORT': 5672,
    'USER': 'guest',
    'PASSWORD': 'guest',
    'EXCHANGE': 'notifications_exchange',
    # 'EXCHANGE': 'users_events',
    'QUEUE': 'user_notifications',
    'ROUTING_KEY': 'user.notification'
}



PLATFORM_NAME = "CollabTask"
SUPPORT_EMAIL = "collabtask86@gmail.com"
SUPPORT_PHONE = "6 54 15 81 75 / 6 56 93 19 87"
LOGIN_URL = "localhost/login/"
PLATFORM_URL = "collabtask"




# Static files (CSS, JavaScript, Images)
# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') 


# env = environ.Env()
# environ.Env.read_env()


# DATABASES = {
#     'default': env.db('DATABASE_URL', default='postgresql://users_db_owner:npg_50aWvfIVYlRN@ep-cool-glitter-a849klro-pooler.eastus2.azure.neon.tech/users_db?sslmode=require')
# }


# # Security
# DEBUG = False
# ALLOWED_HOSTS = [os.environ.get('RENDER_EXTERNAL_HOSTNAME', 'collabtask-users.onrender.com')]



# # RabbitMQ (Render)
# RABBITMQ = {
#     'HOST': os.environ.get('RABBITMQ_HOST', 'rabbitmq-u3yf.onrender.com'),
#     'PORT': 5672,
#     'USER': os.environ.get('RABBITMQ_USER', '@virlence123'),
#     'PASSWORD': os.environ.get('RABBITMQ_PASSWORD', '@virlence123'),
#     'EXCHANGE': 'users_events',
#     'QUEUE': 'user_notifications',
#     'ROUTING_KEY': 'user.notification',
# }

# # CORS
# CORS_ALLOWED_ORIGINS = [
#     os.environ.get('CLIENT_URL', 'https://collabtask-client.onrender.com'),
# ]

DEBUG = True
